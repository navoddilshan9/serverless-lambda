service: blog-post
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

custom:
  fileUploadBucketName: ${self:service}-bucket-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  # blogs functions

  getAllBlogs:
    handler: src/handler.getAll
    timeout: 60
    memorySize: 128

  createBlog:
    handler: src/handler.create
    timeout: 60
    memorySize: 128
    events:
      - httpApi:
          path: /blogs/create
          method: post

  updateBlog:
    handler: src/handler.update
    timeout: 60
    memorySize: 128
    events:
      - httpApi:
          path: /blogs/update
          method: put

  deleteBlog:
    handler: src/handler.delete
    timeout: 60
    memorySize: 128
    events:
      - httpApi:
          path: /blogs/delete
          method: delete

  getBlogById:
    handler: src/handler.findbyid
    timeout: 60
    memorySize: 128
    events:
      - httpApi:
          path: /blogs/findbyid
          method: post

  getBlogsByWriter:
    handler: src/handler.findbyidWriter
    timeout: 60
    memorySize: 128
    events:
      - httpApi:
          path: /blogs/findbyidWriter
          method: post

  s3FileUploader:
    handler: src/handler.upload
    name: s3-blog-image-uploader
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    timeout: 60 # seconds
    memorySize: 128 # mb
    events:
      - http:
          path: /blogs/image
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 's3:Put*'
        Resource: arn:aws:s3:::${self:custom.fileUploadBucketName}/*
    environment:
      FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: PublicRead
